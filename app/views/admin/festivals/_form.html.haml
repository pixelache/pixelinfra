= semantic_nested_form_for [:admin, @festival], :html => {:"data-abide" => '', :class => "custom", :multipart => true} do |f|
  .row
    .small-6.columns= f.input :node, :include_blank => false, :input_html => {:required => ''}
  .row
    .small-6.columns= f.input :name, :input_html => {:required => ''}
  .row
    .small-6.columns= f.input :subtitle
  .row
    .small-6.columns= f.input :website
  .row
    .small-6.columns= f.input :start_at, :as => :string, :input_html => {:class => "datetime_picker", :required => ''}
    .small-6.columns= f.input :end_at, :as => :string, :input_html => {:class => "datetime_picker", :required => ''}
  .row
    %dl.tabs{"data-tab" => ""}
      - I18n.available_locales.each_with_index do |locale, i|
        %dd{:class => (i == 0 ? :active : false)}
          = link_to t(:locale_name, :locale => locale), "##{locale}"
    .tabs-content
      - I18n.available_locales.each_with_index do |locale, i|
        .content{:class => (i == 0 ? :active : false), :id => "#{locale}"}
          = f.globalize_fields_for locale do |en|
            .row
              .small-12.columns
                %b= "Overview of festval (for its frontpage) in #{t :locale_name, :locale => locale}"
                = en.cktext_area :overview_text
                    
  .row
    .small-6.columns
      - if f.object.image?
        = image_tag f.object.image.url(:box)
        = f.input :remove_image, :as => :boolean
      = f.input :image
  .row
    .small-6.columns
      = f.input :slug, :label => 'Override slug'
  .row
    .small-2.columns= f.input :background_colour, :as => :string, :input_html => {:class => :colourpicker }, :label => 'Main colour for archive page background'
  .row
    .small-2.columns= f.input :primary_colour, :as => :string, :input_html => {:class => :colourpicker }, :label => 'Secondary colour for archive page text'
  .row
    .small-2.columns= f.input :tertiary_colour, :as => :string, :input_html => {:class => :colourpicker }, :label => 'Third colour for text links, etc. (should stand out against background)'

  .row
    .small-8.columns
      %fieldset
        %legend
          %strong Videos
        %p Add links to Vimeo or YouTube videos from the festival here. If the video is for a specific event, do NOT add it here, but add it to that event's page.
        = f.fields_for :videos do |ff|
          .row
            .small-8.columns
              - if !ff.object.new_record?
                - unless ff.object.new_record?
                  - unless ff.object.thumbnail.blank?
                    %p= image_tag ff.object.thumbnail.url(:thumb)
                    %p= ff.object.title
                    = ff.input :in_url, label: t(:url_to_video), input_html: { value: ff.object.url }
              - else
                = ff.input :in_url, label: t(:url_to_video)
          = ff.link_to_remove t(:remove_video), class: [:button, :round, :alert, :tiny]
        = f.link_to_add 'Add a video....', :videos, class: [:button, :round, :tiny]
        
        
  .row
    .small-6.columns
      - if f.object.festivalbackdrop?
        = image_tag f.object.festivalbackdrop.url, :width => 400
        = f.input :remove_festivalbackdrop, as: :boolean
      = f.input :festivalbackdrop, hint: 'Resolution must be 1920x480px!'
  .row
    .small-6.columns= f.input :festival_location
  .row
    .small-6.columns= f.input :published
  .row
    .small-6.columns
      %fieldset
        %label Mailing lists
        .row
          .small-12.columns= f.input :has_listserv, label: 'Create mailing list for this project?', hint: 'experimental!!! may not work yet'
        .row
          .small-17.columns  
            = f.input :listservname, input_html: {value: @festival.listservname.blank? ? @festival.name.parameterize : @festival.listservname}, label: 'Name of mailing list:', hint: 'experimental!!!'
            = "@mailer.pixelache.ac"          
  .row
    .small-2.columns= f.submit 'Save', :class => [:button, :round]
= content_for :jquery do
  :plain
    $(document).delegate('span.jPicker', 'click', function() {
            var els = $('.jPicker.Container');
            for(var i = 0; i < $.jPicker.List.length; i++) {
                var o = $($.jPicker.List[i]).offset();
                $(els.get(i)).offset({top: o.top - 50, left: o.left + 100});
            }
        });
  
    $('.colourpicker').jPicker();
        