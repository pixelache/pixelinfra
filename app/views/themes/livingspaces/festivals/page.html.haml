= content_for :description do
  = truncate(strip_tags(@page.body), length: 200)
.page{class: @page.slug}
  .carousel
    - unless @page.photos.blank?
      .slide{style: "background: url(#{@page.photos.first.filename.url.gsub('development', 'production')}) center bottom no-repeat; background-size: cover"} &nbsp;
        

  .overlapping_divider 
    .text= @page.title


        
  .row.body-bottom
    .columns.small-12.large-7.medium-9.small-centered
      = raw @page.body

  - if @page.slug == 'locations'

    .map
      #mapcontainer
   
    = content_for :jquery do
      :plain
        var gmarkers = [];
        var imarkers = [];
        var tram = [
          {
            'title': 'Paavalin kirkko',
            'lat': '60.196453',
            'lng': '24.962482',
            'description':  "The tram starts and finishes its loop here. The times are 13:00, 14:30, and 16:00 on Friday, Saturday and Sunday."
          },

          {
            'lat': '60.193328',
            'lng': '24.964499',
            'description': '1'
          },
          {
            'title': 'Kurvi',
            'lat': '60.187851',
            'lng': '24.962424',
            'description': 'Sörnäinen tram stop'
          },
          {
            'title': 'Hakaniemi',
            'lat': '60.179236',
            'lng': '24.950134',
            'description': 'The tram crosses Hakaniemi four times during each loop.<br /><br />Paavalin kirkko to Mikonkatu: 13:12, 14:42, 16:12<Br />Mikonkatu to Diakonissalaitos: 13:40, 15:10, 16:40<br />Diakonissalaitos to Kauppatori: 13:49, 15:19, 16:49<br />Kauppatori to Paavalin kirkko: 14:10, 15:40, 17:10'
          },
          {
            'title': 'Varsapuistikko',
            'lat': '60.173635',
            'lng': '24.949556',
            'description': 'The tram stops at Varsapuistikko going towards Mikonkatu at 13:16, 14:46 and 16:16. The tram stops here going towards Diakonissalaitos at 13:45, 15:15 and 16:45. (Fri-Sun 25-27 September)'
          },  
          {
            'title': 'Mikonkatu',
            'lat': '60.170209',
            'lng': '24.945397',
            'description': 'Mikonkatu tram stop. Times: 13:30, 15:00, 16:30 from 25-27 September (Fri, Sat & Sun)'
          },
          {
            'lat': '60.173635',
            'lng': '24.949556',
            'description': '6'
          },
          {
            'lat': '60.179236',
            'lng': '24.950134'
          },
          {
            'title': 'Diakonissalaitos',
            'lat': '60.184259',
            'lng': '24.940145',
            'description': 'Diakonissalaitos tram stop. Times: 13:45, 15:15, 16:45, only on 25-27 September (Fri, Sat & Sun)'
          },
          {
            'lat': '60.183406',
            'lng': '24.940703'
          },
          {
            'lat': '60.182627',
            'lng': '24.945724'
          },
          {
            'lat': '60.179236',
            'lng': '24.950134'
          },
          {
            'title': 'Hallituskatu tram stop',
            'lat': '60.170256',
            'lng': '24.953541',
            'description': 'The tram stops here heading to Kauppatori at 13:56, 15:26, and 16:56, only on 25-27 September (Fri, Sat & Sun). The tram stop here from Kauppatori (towards Paavalin kirkko) at 14:03, 15:33, and 17:03 on the same days.'
          },
          {
            'title': 'Kauppatori tram stop', 
            'lat': '60.167421',
            'lng': '24.952232',
            'description': 'Kauppatori tram stop. Times: 14:00, 15:30 and 17:00, only on 25-27 September (Fri, Sat & Sun).'
          },
          {
            'lat': '60.170256',
            'lng': '24.953541'
          },
          {
            'lat': '60.179236',
            'lng': '24.950134'
          },
          {
            'lat': '60.187950',  // Kurvi on the way back
            'lng': '24.963148'
          },
          {
            'lat': '60.193328',
            'lng': '24.964499'
          },
          {
            'lat': '60.196453',
            'lng': '24.962482'
          }
        ];
        function initialize() {
          var myLatlng = new google.maps.LatLng(60.174134, 24.940317);
          var myOptions = { zoom: 13, 
                center: myLatlng,
                scrollwheel: false,
                mapTypeId: google.maps.MapTypeId.ROADMAP,
                styles: [{"featureType":"administrative","elementType":"labels.text.fill","stylers":[{"color":"#444444"}]},{"featureType":"administrative.neighborhood","elementType":"labels.text","stylers":[{"visibility":"on"},{"color":"#ec9f43"},{"weight":"0.01"}]},{"featureType":"landscape","elementType":"all","stylers":[{"color":"#f2f2f2"}]},{"featureType":"landscape","elementType":"geometry","stylers":[{"visibility":"on"},{"color":"#f0d8bc"},{"lightness":"0"}]},{"featureType":"landscape","elementType":"labels.text","stylers":[{"weight":"0.64"}]},{"featureType":"poi","elementType":"all","stylers":[{"visibility":"off"}]},{"featureType":"poi","elementType":"geometry","stylers":[{"visibility":"on"},{"weight":"1"},{"lightness":"63"},{"color":"#dfc4a3"}]},{"featureType":"poi","elementType":"labels","stylers":[{"color":"#ec9f43"}]},{"featureType":"poi.park","elementType":"geometry","stylers":[{"color":"#f4c58e"},{"lightness":"1"}]},{"featureType":"road","elementType":"all","stylers":[{"saturation":-100},{"lightness":45}]},{"featureType":"road.highway","elementType":"all","stylers":[{"visibility":"simplified"}]},{"featureType":"road.highway","elementType":"geometry","stylers":[{"visibility":"on"},{"color":"#ec870f"},{"weight":"0.62"},{"lightness":"53"}]},{"featureType":"road.highway","elementType":"labels.text","stylers":[{"visibility":"on"},{"color":"#c7cece"},{"weight":"0.01"}]},{"featureType":"road.highway","elementType":"labels.text.fill","stylers":[{"weight":"0.01"}]},{"featureType":"road.highway","elementType":"labels.text.stroke","stylers":[{"color":"#ffffff"},{"visibility":"on"},{"weight":"0.01"}]},{"featureType":"road.arterial","elementType":"labels.icon","stylers":[{"visibility":"off"}]},{"featureType":"transit","elementType":"all","stylers":[{"visibility":"off"}]},{"featureType":"water","elementType":"all","stylers":[{"color":"#bfdbf1"},{"visibility":"on"}]},{"featureType":"water","elementType":"geometry","stylers":[{"visibility":"on"},{"color":"#cde1f0"},{"lightness":"-3"}]},{"featureType":"water","elementType":"labels.text.fill","stylers":[{"weight":"0.25"},{"color":"#888d8d"}]},{"featureType":"water","elementType":"labels.text.stroke","stylers":[{"weight":"0.80"}]}]
             }
          map = new google.maps.Map(document.getElementById('mapcontainer'), myOptions);
          var bounds = new google.maps.LatLngBounds();
          var infoWindow = new google.maps.InfoWindow();
          var lat_lng = new Array();
          for (i = 0; i < tram.length; i++) {
            var data = tram[i];
            var myLatlng = new google.maps.LatLng(data.lat, data.lng);
            lat_lng.push(myLatlng);
            
            if (data.title) {
              var marker = new google.maps.Marker({
                  position: myLatlng,
                  map: map,
                  icon: '/assets/livingspaces/images/tram_stop.png',
                  title: data.title
              });
 
              (function (marker, data) {
                  google.maps.event.addListener(marker, "click", function (e) {
                      infoWindow.setContent(data.description);
                      infoWindow.open(map, marker);
                  });
              })(marker, data);
            }
          }
          //Initialize the Path Array
          var path = new google.maps.MVCArray();

          //Initialize the Direction Service
          var service = new google.maps.DirectionsService();
          var lineSymbol = {
              path: google.maps.SymbolPath.FORWARD_CLOSED_ARROW
            };
          //Set the Path Stroke Color
          var poly = new google.maps.Polyline({ map: map, strokeColor: '#669D6B', strokeOpacity: '0.8',
            icons: [{
                 icon: lineSymbol,
                 offset: '15%'
               },
               {
                icon: lineSymbol,
                offset: '30%'
                },
                {
                icon: lineSymbol,
                offset: '45%'
                },
                {
                icon: lineSymbol,
                offset: '60%'
                },
                {
                icon: lineSymbol,
                offset: '75%'
                },
                {
                icon: lineSymbol,
                offset: '90%'
                }

               ]
             });

          //Loop and Draw Path Route between the Points on MAP -- first six stops
          // for (var i = 0; i < 5; i++) {
          //    if ((i + 1) < 4) {
          //       var src = lat_lng[i];
          //       var des = lat_lng[i+1];
                 path.push(lat_lng[0]);
                 poly.setPath(path);
                 service.route({
                     origin: lat_lng[0],
                     destination: lat_lng[5],
                     travelMode: google.maps.DirectionsTravelMode.DRIVING
                 }, function (result, status) {
                     if (status == google.maps.DirectionsStatus.OK) {
                         for (var i = 0, len = result.routes[0].overview_path.length; i < len; i++) {
                             path.push(result.routes[0].overview_path[i]);
                         }
                     }
                 });
          //    }
          // }
          // second loop change color 
          var path2 = new google.maps.MVCArray();
          var service2 = new google.maps.DirectionsService();
          var poly2 = new google.maps.Polyline({ map: map, strokeColor: '#6DF378', strokeOpacity: '0.8' ,
            icons: [{
                 icon: lineSymbol,
                 offset: '15%'
               },
               {
                icon: lineSymbol,
                offset: '30%'
                },
                {
                icon: lineSymbol,
                offset: '45%'
                },
                {
                icon: lineSymbol,
                offset: '60%'
                },
                {
                icon: lineSymbol,
                offset: '75%'
                },
                {
                icon: lineSymbol,
                offset: '90%'
                }

               ]
          });
          path2.push(lat_lng[5]);
          poly2.setPath(path2);
          service.route({
              origin: lat_lng[5],
              destination: lat_lng[8],
              waypoints: [ {location: lat_lng[6]}, {location: lat_lng[7]} ],
              travelMode: google.maps.DirectionsTravelMode.WALKING
          }, function (result, status) {
              if (status == google.maps.DirectionsStatus.OK) {
                  for (var i = 0, len = result.routes[0].overview_path.length; i < len; i++) {
                      path2.push(result.routes[0].overview_path[i]);
                  }
              }
          });


          // third part of loop
          var path3 = new google.maps.MVCArray();
          var service3 = new google.maps.DirectionsService();
          var poly3 = new google.maps.Polyline({ map: map, strokeColor: '#C2F36D', strokeOpacity: '0.8',
          icons: [{
               icon: lineSymbol,
               offset: '5%'
             },
             {
              icon: lineSymbol,
              offset: '25%'
              },
              {
              icon: lineSymbol,
              offset: '40%'
              },
              {
              icon: lineSymbol,
              offset: '70%'
              },

              {
              icon: lineSymbol,
              offset: '90%'
              }

             ]
           });
          path3.push(lat_lng[8]);
          poly3.setPath(path3);
          service3.route({
              origin: lat_lng[8],
              destination: lat_lng[13],
              waypoints: [{location: lat_lng[9]}, {location: lat_lng[10]}, {location: lat_lng[11]}, {location: lat_lng[12]}],
              travelMode: google.maps.DirectionsTravelMode.DRIVING
          }, function (result, status) {
              if (status == google.maps.DirectionsStatus.OK) {
                  for (var i = 0, len = result.routes[0].overview_path.length; i < len; i++) {
                      path3.push(result.routes[0].overview_path[i]);
                  }
              }
          });
          
          // last part of loop
          var path4 = new google.maps.MVCArray();
          var service4 = new google.maps.DirectionsService();
          var poly4 = new google.maps.Polyline({ map: map, strokeColor: '#8FB056', strokeOpacity: '0.8',
            icons: [{
                 icon: lineSymbol,
                 offset: '15%'
               },
               {
                icon: lineSymbol,
                offset: '30%'
                },
                {
                icon: lineSymbol,
                offset: '45%'
                },
                {
                icon: lineSymbol,
                offset: '60%'
                },
                {
                icon: lineSymbol,
                offset: '75%'
                },
                {
                icon: lineSymbol,
                offset: '90%'
                }

               ]
            });
          path4.push(lat_lng[13]);
          poly4.setPath(path4);
          service4.route({
              origin: lat_lng[13],
              waypoints: [{location: lat_lng[14]}, {location: lat_lng[15]}, {location: lat_lng[16]}, {location: lat_lng[17]}],
              destination: lat_lng[18],
              travelMode: google.maps.DirectionsTravelMode.WALKING
          }, function (result, status) {
              if (status == google.maps.DirectionsStatus.OK) {
                  for (var i = 0, len = result.routes[0].overview_path.length; i < len; i++) {
                      path4.push(result.routes[0].overview_path[i]);
                  }
              }
          });
          
      - @festival.events.published.map(&:place).compact.uniq.each do |p|
        - next unless p.latitude
        - next unless p.city =~ /Helsinki/i || p.city =~ /Espoo/i || p.city == /Vantaa/i
        - next if p.slug =~ /^various-locations/
        - if p.events.published.by_festival(@festival).size == 1
          - e = p.events.published.by_festival(@festival).first
          :plain
            var contentString#{p.id.to_s} = '<div class="infowindow_content">'+
                  '<h4 class="firstHeading">#{escape_javascript(e.name)}</h4>'+
                  '<div class="bodyContent">'+
                  '<p>#{escape_javascript(truncate_html(e.description, :length => 150))}'+
                  '<a href="#{url_for(e)}" target="blank">#{t(:read_more)}</a></p>'+
                  '<p>Where: #{e.place.name}</p>'+
                  '<p>When: #{date_range(e.start_at, e.end_at)}</p>'+
                  '</div>'+
                  '</div>';
        - else
          :plain
            var contentString#{p.id.to_s} = '<div class="infowindow_content">'+
                  '<h4 class="firstHeading">#{p.name}</h4>'+
                  '<h6>#{escape_javascript(t(:multiple_events_here))}</h6>'+
                  '<div class="bodyContent">';
          - p.events.published.by_festival(@festival).sort_by(&:start_at).each do |e|
            :plain
              contentString#{p.id.to_s} += '<div><p>#{date_range(e.start_at, e.end_at)}: #{escape_javascript(e.name)}'+
              ' <a href="#{url_for(e)}" target="blank">#{t(:read_more)}</a></p>'+
              '</div>';
          :plain  
            contentString#{p.id.to_s} += '</div>';
        :plain                  
          var infowindow#{p.id.to_s} = new google.maps.InfoWindow({
                  content: contentString#{p.id.to_s},
                  maxWidth: 350
            });                
            var ll#{p.id.to_s} =  new google.maps.LatLng(#{p.latitude}, #{p.longitude});
            bounds.extend(ll#{p.id.to_s});
            var marker#{p.id.to_s} = new google.maps.Marker({  position: ll#{p.id.to_s}, map: map, 
              icon: '/assets/livingspaces/images/pin.png',
              title: '#{escape_javascript(p.name)}'  });
            gmarkers[#{p.id.to_s}] = marker#{p.id.to_s};
            google.maps.event.addListener(marker#{p.id.to_s}, 'click', function() {
              infowindow#{p.id.to_s}.open(map,marker#{p.id.to_s});
            });

              
      - if @festival.festivalthemes.find('helsinki-inside-out')
        - experiences = @festival.festivalthemes.find('helsinki-inside-out').experiences.approved
          - unless experiences.blank?
            - experiences.each do |e|
            :plain
              var contentString_#{e.id.to_s} = '<div class="infowindow_content">'+
                    '<h4 class="firstHeading">#{escape_javascript(e.title)}</h4>'+
                    '<div><em><a href="/festivals/festival-2015/theme/helsinki-inside-out" target="_blank">Helsinki Inside&sdot;Out programme</a></em></div>'+
                    '<div class="bodyContent">'+
                    '<p>#{escape_javascript(e.description)}</p>'+
                    '<p>Where: #{e.location}</p>'+
                    '<p>When: #{e.start_at.strftime("%H:%M")} - #{e.end_at.strftime("%H:%M")}</p>'+
                    '</div>'+
                    '</div>';
              var infowindow_#{e.id.to_s} = new google.maps.InfoWindow({
                    content: contentString_#{e.id.to_s},
                    maxWidth: 350
              });                
              var ll_#{e.id.to_s} =  new google.maps.LatLng(#{e.latitude}, #{e.longitude});
              bounds.extend(ll_#{e.id.to_s});
              var marker_#{e.id.to_s} = new google.maps.Marker({  position: ll_#{e.id.to_s}, map: map, 
                icon: '/assets/livingspaces/images/inverted_pin.png',
                title: '#{escape_javascript(e.title)}'  });
              imarkers[#{e.id.to_s}] = marker_#{e.id.to_s};
              google.maps.event.addListener(marker_#{e.id.to_s}, 'click', function() {
                infowindow_#{e.id.to_s}.open(map,marker_#{e.id.to_s});
              });
        
      :plain
          map.fitBounds(bounds);
          zoomChangeBoundsListener = 
              google.maps.event.addListenerOnce(map, 'bounds_changed', function(event) {
                  if (this.getZoom()){
                      this.setZoom(13);
                  }
          });
          setTimeout(function(){google.maps.event.removeListener(zoomChangeBoundsListener)}, 2000);
          
          return map;
        }
        //map = initialize();
        map = google.maps.event.addDomListener(window, 'load', initialize);
        markers = gmarkers;