- cache ['event', @event, I18n.locale] do
  - if @event.festival
    = content_for :festival_menu do
      = render :partial => 'festivals/festival_menu', :locals => {festival: @event.festival}
  - else
    = content_for :page_tree do
      .left-collapse
        - if @event.project
          = link_to t(:projects), projects_path
          = " : "
          - @event.project.self_and_ancestors.reverse.each do |p|
            %span.leaf
              = link_to p.name, p
              = " : "
          %strong= @event.name
      
  .event_single.row.expanded.outer{class: @event.festival ? :festival : false}


    .internal.columns.small-12.medium-8.columns.small-centered.post
      .title
        = @event.name
        - if can? :edit , @event
          = link_to t(:edit_event), edit_admin_event_path(@event), class: [:tiny, :button, :secondary]
      .metadata= date_range(@event.start_at, @event.end_at, :format => :long)
      .metadata
        = @event.place.try(:name)
        - unless @event.place.blank?
          %p.place_address
            = @event.place.address
          - unless @event.place.latitude.blank?
            %p.map_link= link_to t(:map), '#', onclick: "$('#mapcontainer').slideToggle(function()  { google.maps.event.trigger(map, 'resize'); map.setCenter(new google.maps.LatLng(#{@event.place.latitude}, #{@event.place.longitude}));});return false;"
            .google_map#mapcontainer= render partial: 'shared/small_map'
      - if @event.has_documentation?
        .metadata= link_to t(:scroll_down_for_documentation), '#', onclick: 'scrollTo("#documentation");'
      - if @event.image?
        .event_image{class: dimension(@event)}= best_image(@event)
          
      .body
        = raw @event.description

        - if @event.registration_required? && @event.start_at >= Time.now
          #registration_form.row.expanded
            %h2= t "livingspaces.register_to_participate"
            - if @event.max_attendees
              - if @event.hide_registrants
                %p= t "limited_places"
                - if @event.is_full?
                  %p
                    This event is
                    %strong FULL.
                    However, you may still register for our waiting list and you will receive notification if a place frees up. 
              - else
                - if @event.require_approval == true
                  %p There are limited places available. Please fill out the registration form and we will contact you if you are selected.
                - else
                  - if @event.is_full?
                    %p
                      This event is
                      %strong FULL.
                      However, you may still register for our waiting list and you will receive notification if a place frees up.
                  - else
                    %p= pluralize_sentence(@event.max_attendees - @event.attendees.not_waiting.size, "workshop_place_count")                  
                      
            = semantic_form_for([@event, @attendee = Attendee.new], html: {:"data-abide" => ''}) do |f|
              .row.expanded
                .small-10.columns= f.input :name, label: 'Your name:', input_html: {required: :required}
              .row.expanded
                .small-10.columns= f.input :email, label: 'Your email:', input_html: {required: :required}              
              .row.expanded
                .small-10.columns= f.input :phone, label: 'Your phone number:', input_html: {required: :required}
              - unless @event.question_motivation.blank?
                .row.expanded
                  .small-10.columns= f.input :motivation_statement, label: @event.question_motivation, input_html: {required: :required}
              - unless @event.question_creators.blank?
                .row.expanded
                  .small-10.columns= f.input :project_creators, label: @event.question_creators, input_html: {required: :required}
              - unless @event.question_description.blank?
                .row.expanded
                  .small-10.columns= f.input :project_description, label: @event.question_description, input_html: {required: :required}
              .row.expanded
                .small-10.columns= recaptcha_tags hl: I18n.locale.to_s, :display => { :theme => 'white' }
              .row.expanded
                .small-10.columns= f.submit 'Submit', class: [:button, :round, :small]
        - elsif @event.registration_required? && @event.start_at >= Time.now                   
          #registration_form.row{class: @event.has_documentation? ? :hasdoc : false}
            %h2= t :registration_is_closed
            
      .row.expanded
        .small-12.centered.columns.share_this= render :partial => 'shared/share_this_buttons', locals: {url:  CGI::escape("http://#{request.host}#{request.port != 80 ? ":" + request.port.to_s : ''}#{url_for(@event)}"), title: CGI::escape(@event.name) }

      - if @event.has_documentation?

        .documentation#documentation
          .row.expanded.related_title
            %h1= t(:documentation)
          - unless @event.all_documentation["images"].empty?
            .image_carousel
              - @event.all_documentation["images"].each do |i|
                .img
                  = link_to image_tag(i.filename.url(:standard)), i.filename.url, rel: :lazybox
                  .thumb= image_tag i.filename.url(:thumb)
          - unless @event.flickrsets.empty?
            .flickr_galleries
              .subtitle= t(@event.all_documentation["images"].empty? ? :image_galleries : :additional_images)
              - @event.flickrsets.each do |set|
                %p
                  = link_to set.title, set.flickr_url, target: :_blank
                  on Flickr
              
          - if @event.all_documentation["videos"].empty?
            - if @event.project
              - unless @event.project.videos.empty?
                .subtitle= t :videos_from_this_project, project: @event.project.name
                .video_container
                  - @event.project.videos.each do |v|
                    .video.row{:style => v.thumbnail? ? "background: url(#{v.thumbnail.url}) no-repeat center center" : false }
                      .flex-video= raw figure_video_type(v, v.video_width.blank? ? 580 : v.video_width, v.video_height.blank? ? 390 : v.video_height)
                    .row
                      .large-12.columns
                        .video_title= v.title
                        .video_description= raw v.description
          - else
            .video_container
              - @event.all_documentation["videos"].each do |v|
                .video.row.expanded
                  = raw figure_video_type(v, 400, 300)
                  %br/
                  .video_title= v.title
                  .video_description= raw v.description

    
  - unless @event.related_content.empty?
    .related_container.event
      .row.expanded
        .small-12.medium-8.columns.small-centered
          .row.expanded
            .small-12.columns.related_title
              %h1= t(:related_content)
      - unless @event.related_content.empty?
        - @event.related_content[0..5].each do |related|
          .row.expanded{class: related == @event.related_content[5] ? :last : false}
            .small-12.medium-8.columns.small-centered.related_container
              = render :partial => 'shared/related', locals: {item: @event, related: related }

  = content_for :jquery do
    :plain
      $('.image_carousel').slick({infinite: true,
        slidesToShow: 1,

        dots: true,
        customPaging: function(slick,index) {
          return slick.$slides.eq(index).find('.thumb').html();
        },
        prevArrow: '<a data-role="none" class="slick-prev slick-arrow" aria-label="Previous" role="button" style="display: block;"><</a>',
        nextArrow: '<a data-role="none" class="slick-next slick-arrow" aria-label="Next" role="button" style="display: block;">></a>',
        arrows: true,
        slide: '.img',
        variableWidth: false,
        autoplay: true,
        autoplaySpeed: 2400,
        slidesToScroll: 1,
      });
      $('.video_description').readmore();

    - unless @event.place.latitude.blank?
      :plain

        function initialize() {
          var myLatlng = new google.maps.LatLng(#{@event.place.latitude}, #{@event.place.longitude});
          var myOptions = { zoom: 14, 
                center: myLatlng,
                mapTypeId: google.maps.MapTypeId.ROADMAP
            }


          map = new google.maps.Map(document.getElementById('mapcontainer'), myOptions);
          var marker = new google.maps.Marker({  position: myLatlng, map: map, 
            title: '#{escape_javascript(@event.name)}', 
            map: map
          });
          return map;
        }
        //map = initialize();
        map = google.maps.event.addDomListener(window, 'load', initialize);
      
