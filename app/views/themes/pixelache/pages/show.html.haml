= content_for :page_tree do
  .left-collapse
    - @page.self_and_ancestors.reverse.each do |p|
      - if p == @page
        %strong= p.name
      - else
        %span.leaf
          = link_to p.name, p
          = " : "

.page
  .row
    - unless @page.headings.empty?
      .medium-4.small-12.columns.right.page_nav
        .magellan-scrollnav
          %div{:"data-magellan-expedition" => :fixed, :"data-options" => "threshold:220;destination_threshold:220;fixed_top:220" }
            %dl.sub-nav
              - @page.headings.each do |heading|
                - next if heading.first == 'top'
                %dd{:"data-magellan-arrival" => heading.first}= link_to heading.last, "##{heading.first}"
    - unless @page.photos.empty?
      - unless @page.photos.first.filename_width.blank?
        - unless @page.photos.first.filename_width < 1200
          .page_banner= image_tag @page.photos.first.filename.url(:wide)
        
    .small-12.medium-7.medium-offset-1.columns
      .row
        .small-12.columns.title
          = raw @page.name
      
          - if can? :edit, @page
            %small= link_to t(:edit), edit_admin_subsite_page_path(@page.subsite, @page.id), class: [:button, :tiny, :secondary]
      .row
        .small-12.columns.body
          = raw (magellanise(@page.body, @page.headings))
          
          - if @page.opencall
            .opencall_page_container
              - if @page.opencall.is_open?
                = semantic_form_for [@opencall, @opencallsubmission], html: {multipart: true, :"data-abide" => ''} do |f|
                  = f.input :opencall_id, as: :hidden
                  .row
                    .small-10.medium-6.columns
                      = f.input :name, label: t(:your_name), input_html: {required: ''}
                  .row
                    .small-10.medium-6.columns
                      = f.input :email, label: t(:your_email), input_html: {required: ''}
                  .row
                    .small-10.medium-6.columns
                      = f.input :phone, input_html: {required: ''}
                  .row
                    .small-10.medium-6.columns
                      = f.input :address, label: t(:your_address), input_html: {required: ''}
                  .row
                    .small-5.medium-3.columns
                      = f.input :city, input_html: {required: ''}
                  .row
                    .small-5.medium-3.columns
                      = f.input :postcode, input_html: {required: ''}
                  .row
                    .small-10.medium-6.columns
                      = f.input :country, input_html: {required: ''}
                  .row
                    .small-10.medium-6.columns
                      = f.input :website
      
                  = f.fields_for :opencallanswers do |ff|
                    .row{class: ff.object.opencallquestion.question_type == 1 ? :has_topline : false }
                      .medium-12.small-12.columns.text-left.left_form
                        .form_label
                          %label.label= ff.object.opencallquestion.question_text
                        = ff.input :opencallquestion_id, as: :hidden
                      .small-12.columns{class: [ ff.object.opencallquestion.character_limit ? (ff.object.opencallquestion.character_limit > 1000 ? :long : false ) : false, "ocqtype_" + ff.object.opencallquestion.question_type.to_s, ff.object.opencallquestion.question_type == 1 ? "medium-12" : "medium-12"] }
                        - if ff.object.opencallquestion.question_type == 3
                          %label.label
                            = ff.input :attachment, label: false, input_html: { required: ff.object.opencallquestion.is_required == true ? '' : false }

                        - elsif ff.object.opencallquestion.question_type == 5
                          = ff.input :answer, label: false,  as: :boolean
                        - elsif ff.object.opencallquestion.question_type == 1
                          = ff.input :answer, label: false,  as: :text, input_html: { required: ff.object.opencallquestion.is_required == true ? '' : false }
                          - unless ff.object.opencallquestion.character_limit.blank?
                            .limit= ff.object.opencallquestion.character_limit
                            %p.counter= ff.object.new_record? ? "#{ff.object.opencallquestion.character_limit} characters remaining" : "#{ff.object.opencallquestion.character_limit - ff.object.answer.length} characters remaining"
             
             
                        - else
                          = ff.input :answer, label: false,  as: :string
        
        
                  .row
                    .small-12.columns
                      = f.submit 'Submit', class: [:button, :small, :round]
              - else
                %h4= t :opencall_is_closed
            = content_for :jquery do
              :plain

                $('textarea').keyup(function () {
      
                    var left = parseInt($(this).parents('li').next('.limit').text()) - $(this).val().length;

                    if (left < 0) {
                        left = "<span style='color: red;'>" + left + "</span>";
                    }
   
                    $(this).parents('li').next().next('.counter').html(left + ' characters remaining');
                });


          
/ = content_for :jquery do
/   :plain
/
/
/     $('.arrow-down').mouseover(function() {
/       if ($('.children .top').css('display') == "block") {
/         $('.children').css('top',$('.page_tree').offset().top + $('.page_tree').css('height'));
/       }
/     });
/     $('.arrow-up').mouseover(function() {
/       if ($('.children .top').css('display') == "block") {
/         $('.children').css('top',$('.page').offset().top );
/       }
/     });
/